#####################
# MapR Setup
# This file should be copied to env.list and then updated to reflect the mapr cluster you are connecting to. 
####################

#####################################################
# This is the base image used. We will pull this down and we will use this as the FROM image
export MAPR_PACC_IMG="maprtech/pacc:6.0.1_5.0.0_ubuntu16"

# Either use maprcli (standard) or provide a path to your own (You probably don't need to change this)
#export MAPRCLI="/home/zetaadm/homecluster/zetago/zeta fs mapr maprcli -U=mapr"
export MAPRCLI="maprcli"

#####################################################
# MapR Cluster info

# MAPR_CLUSTER is the cluster name 
export MAPR_CLUSTER=mycluster

# MAPR_CLDB_HOSTS is the list of CLDBs comma sep. If you need a different port use colons i.e. host1:7222,host2:7222
export MAPR_CLDB_HOSTS=cldb.lab.local

# Home directory in the contain for mapr. This should not need to be changed
export MAPR_HOME=/opt/mapr

# MapR FS Posix mounting path. This is the base inside the container, your MapR-FS will be at $MAPR_MOUNT_PATH/$MAPR_CLUSTER inside the container
export MAPR_MOUNT_PATH=/mapr

# Timezone of your cluster
export MAPR_TZ=US/Central

#####################################################
# This is the location in MapR FS where the git repo is cloned and we will use as an application home directory
#
# Ensure the MAPR_CONTAINER_USER has access to this!
#
# APP_HOME is the HDFS location (no /mapr/mycluster) we then make APP_HOME_POSIX frmo the MAPR_MOUNT_PATH and MAPR_CLUSTER

export APP_HOME="/apps/prod/maprvideo/mapryolostreams"

export APP_HOME_POSIX="${MAPR_MOUNT_PATH}/${MAPR_CLUSTER}${APP_HOME}"


#####################################################
# User information for setting up inside the container
# MAPR_CONTAINER_USER must also exist on the docker host. Or at the very least, MAPR_CONTAINER_UID can NOT be used by anything. This is so we set permissions on the conf files

export MAPR_CONTAINER_USER=mycontaineruser
export MAPR_CONTAINER_PASSWORD=
export MAPR_CONTAINER_GROUP=mycontainergroup
export MAPR_CONTAINER_UID=12345
export MAPR_CONTAINER_GID=12345

#####################################################
# MAPR Secure Cluster Ticket Info
#
# For secure clusters, there needs to be a MapR Ticket Follow these steps 
#
# 1. Place the ticket in a directory on the host running the contianer and update MAPR_TICKET_HOST_LOCATION
# 2. Update MAPR_TICKET_FILE_NAME with the name of the ticket
# 3. (Optional) if you want the ticket location to be different inside the contianer, please update MAPR_TICKET_CONTAINER_LOCATION (this is NOT needed)

export MAPR_TICKET_HOST_LOCATION="${APP_HOME_POSIX}/maprticket"
export MAPR_TICKET_CONTAINER_LOCATION="/tmp/mapr_ticket"

export MAPR_TICKET_FILENAME="maprticket"
export MAPR_TICKETFILE_LOCATION="${MAPR_TICKET_CONTAINER_LOCATION}/${MAPR_TICKET_FILENAME}"

# For non-secure clusters, simplely uncomment this line
# export MAPR_TICKETFILE_LOCATION=""


#####################################################

# Output image name after building.sh script. 

export APP_IMG="mapryolostream:latest"


#####################################################

# Stream location, including volume location, name, stream name, number of partitions, and topic name

#Note: we don't create input topics, only output
export MAPR_STREAMS_STREAM_INPUT_LOCATION="/app/prod/maprvideo/maprrtsp2stream/video/videostream"
export MAPR_STREAMS_TOPIC_INPUT="frames"

export MAPR_STREAMS_VOLUME_LOCATION="/apps/prod/maprvideo/mapryolo/video"
export MAPR_STREAMS_VOLUME_NAME="prod.apps.mapryolo.app"
export MAPR_STREAMS_STREAM_LOCATION="${MAPR_STREAMS_VOLUME_LOCATION}/videostream"
export MAPR_STREAMS_DEFAULT_PARTITIONS="3"
export MAPR_STREAMS_DEFAULT_TTL="0"   # This is 0 for classified images
export MAPR_STREAMS_TOPICS="classframes"
export MAPR_STREAMS_TOPIC_OUTPUT="classframes"


#####################################################
#
# Application ENV Variables
# 
# These variables are not used directly by the MapR PACC, but are used by the application itself. 
# 

export APP_YOLO_SAVE_CLASS_IMG="1" # 1 To save the image with bounding boxes in output stream, anything else to not to 

export APP_YOLO_WEIGHTS_DIR="${APP_HOME_POSIX}/weights"
export APP_YOLO_WEIGHTS_FILE="yolov3.weights"
export APP_YOLO_WEIGHTS_URL="https://pjreddie.com/media/files/yolov3.weights"

export APP_STREAMS_CONSUMER_GROUP="myconsumergroup"
export APP_STREAMS_CONSUMER_GROUP_START="earliest" # or use latest to drop needle at the end of the stream
export APP_CMD=""

